generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  phone     String   @db.VarChar(20)
  password  String   @db.VarChar(255)
  cpf       String   @db.VarChar(11)
  controls  Json?    @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account?

  @@index([email])
  @@index([cpf])
}

model Account {
  id           String    @id @default(uuid())
  currentValue Decimal   @db.Decimal(19, 2)
  currency     Currency  @default(BRL)
  controls     Json?     @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  categories   Category[]
  objectives   Objective[]
  plannings    Planning[]
  creditCards  CreditCard[]
  holdings     Holding[]

  @@index([userId])
}

model Transaction {
  id          String          @id @default(uuid())
  value       Decimal         @db.Decimal(19, 2)
  type        TransactionType @default(output)
  destination String          @db.VarChar(255)
  description String          @db.Text

  files File[]

  accountId   String
  account     Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  creditCardId String?
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id])

  objectiveId String?
  objective   Objective? @relation(fields: [objectiveId], references: [id])

  invoiceId String?
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([categoryId])
  @@index([creditCardId])
  @@index([invoiceId])
  @@index([objectiveId])
  @@index([createdAt])
  @@index([accountId, createdAt])
  @@index([type, accountId])
  @@index([accountId, type, createdAt])
}

model Category {
  id        String       @id @default(uuid())
  name      String       @db.VarChar(255)
  controls  Json?        @db.JsonB

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  planningCategories PlanningCategories[]
  files File[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([accountId, name])
}

model CreditCard {
  id             String   @id @default(uuid())
  name           String   @default("") @db.VarChar(100)
  availableLimit Decimal  @db.Decimal(19, 2)
  limit          Decimal  @db.Decimal(19, 2)
  company        String   @db.VarChar(50)
  expire         Int      @db.SmallInt
  close          Int      @db.SmallInt
  controls       Json?    @db.JsonB

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  invoices Invoice[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([accountId, close])
}

model Objective {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  limit     Decimal  @db.Decimal(19, 2)
  milestone DateTime

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([accountId, milestone])
}

model Planning {
  id             String   @id @default(uuid())
  availableLimit Decimal  @db.Decimal(19, 2)
  limit          Decimal  @db.Decimal(19, 2)
  month          DateTime
  title          String   @db.VarChar(255)

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  planningCategories PlanningCategories[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([month])
  @@index([accountId, month])
}

model PlanningCategories {
  id             String   @id @default(uuid())
  availableLimit Decimal  @db.Decimal(19, 2)
  limit          Decimal  @db.Decimal(19, 2)

  categoryId String
  planningId String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  planning Planning @relation(fields: [planningId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([categoryId, planningId])
  @@index([planningId])
  @@index([categoryId])
}

model Invoice {
  id          String   @id @default(uuid())
  dueDate     DateTime
  closingDate DateTime
  status      Boolean  @default(true)
  
  transactions Transaction[]

  creditCardId String
  creditCard CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creditCardId])
  @@index([dueDate])
  @@index([status])
  @@index([creditCardId, status])
  @@index([creditCardId, dueDate])
}

model File {
  id            String   @id @default(uuid())
  originalName  String   @db.VarChar(255)
  storedName    String   @db.VarChar(255)
  mimeType      String   @db.VarChar(100)
  size          Int
  url           String   @db.VarChar(500)
  blobPathname  String   @db.VarChar(500)
  userId        Int?
  categoryId    String?
  transactionId String?
  description   String?  @db.Text

  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("files")
  @@index([categoryId])
  @@index([transactionId])
  @@index([userId])
  @@index([categoryId, transactionId])
}

model Holding {
  id       String   @id @default(uuid())
  name     String   @db.VarChar(255)
  tax      Decimal  @db.Decimal(19, 2)
  dueDate  DateTime
  total    Decimal  @db.Decimal(19, 2)
  controls Json?    @db.JsonB

  accountId String
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  movimentations Moviment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([dueDate])
  @@index([accountId, dueDate])
}

model Moviment {
  id        String          @id @default(uuid())
  value     Decimal         @db.Decimal(19, 2)
  type      TransactionType
  holdingId String
  controls  Json?           @db.JsonB

  holding Holding @relation(fields: [holdingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([holdingId])
  @@index([type])
  @@index([holdingId, type])
  @@index([holdingId, createdAt])
}

enum TransactionType {
  input
  output
}

enum Currency {
  BRL
  USD
}